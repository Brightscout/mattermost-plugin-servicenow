// DO NOT EDIT, auto generated by struct2interface

package plugin

import (
	"context"
	"net/http"
	"sync"

	"github.com/Brightscout/mattermost-plugin-servicenow/server/serializer"
	"github.com/gorilla/mux"
	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-server/v5/plugin"
	"golang.org/x/oauth2"
)

type PluginIface interface {
	// DM posts a simple Direct Message to the specified user
	DM(mattermostUserID, format string, args ...interface{}) (string, error)
	// Ephemeral sends an ephemeral message to a user
	Ephemeral(userID, channelID, rootID, format string, args ...interface{})
	// InitAPI initializes the REST API
	InitAPI() *mux.Router
	// OnConfigurationChange is invoked when configuration changes may have been made.
	OnConfigurationChange() error
	// ServeHTTP demonstrates a plugin that handles HTTP requests
	ServeHTTP(c *plugin.Context, w http.ResponseWriter, r *http.Request)
	CompleteOAuth2(authedUserID, code, state string) error
	DisconnectUser(mattermostUserID string) error
	ExecuteCommand(c *plugin.Context, args *model.CommandArgs) (*model.CommandResponse, *model.AppError)
	GetClientFromRequest(r *http.Request) Client
	GetClientFromUser(args *model.CommandArgs, user *User) Client
	GetPluginURL() string
	GetPluginURLPath() string
	GetRecordFromServiceNowForSubscription(subscription *serializer.SubscriptionResponse, client Client, wg *sync.WaitGroup)
	GetSiteURL() string
	GetUser(mattermostUserID string) (*User, error)
	InitOAuth2(mattermostUserID string) (string, error)
	NewClient(ctx context.Context, token *oauth2.Token) Client
	NewEncodedAuthToken(token *oauth2.Token) (returnToken string, returnErr error)
	NewOAuth2Config() *oauth2.Config
	NewStore(api plugin.API) Store
	OnActivate() error
	ParseAuthToken(encoded string) (*oauth2.Token, error)
}
