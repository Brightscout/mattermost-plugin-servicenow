// Code generated by mockery v2.14.0. DO NOT EDIT.

// Regenerate this file using `make plugin-mocks`.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost-server/v5/model"

	mux "github.com/gorilla/mux"

	oauth2 "golang.org/x/oauth2"

	plugin "github.com/Brightscout/mattermost-plugin-servicenow/server/plugin"

	serializer "github.com/Brightscout/mattermost-plugin-servicenow/server/serializer"

	sync "sync"

	v5plugin "github.com/mattermost/mattermost-server/v5/plugin"
)

// PluginIface is an autogenerated mock type for the PluginIface type
type PluginIface struct {
	mock.Mock
}

// CompleteOAuth2 provides a mock function with given fields: authedUserID, code, state
func (_m *PluginIface) CompleteOAuth2(authedUserID string, code string, state string) error {
	ret := _m.Called(authedUserID, code, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(authedUserID, code, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DM provides a mock function with given fields: mattermostUserID, format, args
func (_m *PluginIface) DM(mattermostUserID string, format string, args ...interface{}) (string, error) {
	var _ca []interface{}
	_ca = append(_ca, mattermostUserID, format)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) string); ok {
		r0 = rf(mattermostUserID, format, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(mattermostUserID, format, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectUser provides a mock function with given fields: mattermostUserID
func (_m *PluginIface) DisconnectUser(mattermostUserID string) error {
	ret := _m.Called(mattermostUserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mattermostUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ephemeral provides a mock function with given fields: userID, channelID, rootID, format, args
func (_m *PluginIface) Ephemeral(userID string, channelID string, rootID string, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, userID, channelID, rootID, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ExecuteCommand provides a mock function with given fields: c, args
func (_m *PluginIface) ExecuteCommand(c *v5plugin.Context, args *model.CommandArgs) (*model.CommandResponse, *model.AppError) {
	ret := _m.Called(c, args)

	var r0 *model.CommandResponse
	if rf, ok := ret.Get(0).(func(*v5plugin.Context, *model.CommandArgs) *model.CommandResponse); ok {
		r0 = rf(c, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CommandResponse)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*v5plugin.Context, *model.CommandArgs) *model.AppError); ok {
		r1 = rf(c, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetClientFromRequest provides a mock function with given fields: r
func (_m *PluginIface) GetClientFromRequest(r *http.Request) plugin.Client {
	ret := _m.Called(r)

	var r0 plugin.Client
	if rf, ok := ret.Get(0).(func(*http.Request) plugin.Client); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.Client)
		}
	}

	return r0
}

// GetClientFromUser provides a mock function with given fields: args, user
func (_m *PluginIface) GetClientFromUser(args *model.CommandArgs, user *plugin.User) plugin.Client {
	ret := _m.Called(args, user)

	var r0 plugin.Client
	if rf, ok := ret.Get(0).(func(*model.CommandArgs, *plugin.User) plugin.Client); ok {
		r0 = rf(args, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.Client)
		}
	}

	return r0
}

// GetPluginURL provides a mock function with given fields:
func (_m *PluginIface) GetPluginURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPluginURLPath provides a mock function with given fields:
func (_m *PluginIface) GetPluginURLPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRecordFromServiceNowForSubscription provides a mock function with given fields: subscription, client, wg
func (_m *PluginIface) GetRecordFromServiceNowForSubscription(subscription *serializer.SubscriptionResponse, client plugin.Client, wg *sync.WaitGroup) {
	_m.Called(subscription, client, wg)
}

// GetSiteURL provides a mock function with given fields:
func (_m *PluginIface) GetSiteURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUser provides a mock function with given fields: mattermostUserID
func (_m *PluginIface) GetUser(mattermostUserID string) (*plugin.User, error) {
	ret := _m.Called(mattermostUserID)

	var r0 *plugin.User
	if rf, ok := ret.Get(0).(func(string) *plugin.User); ok {
		r0 = rf(mattermostUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugin.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mattermostUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitAPI provides a mock function with given fields:
func (_m *PluginIface) InitAPI() *mux.Router {
	ret := _m.Called()

	var r0 *mux.Router
	if rf, ok := ret.Get(0).(func() *mux.Router); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mux.Router)
		}
	}

	return r0
}

// InitOAuth2 provides a mock function with given fields: mattermostUserID
func (_m *PluginIface) InitOAuth2(mattermostUserID string) (string, error) {
	ret := _m.Called(mattermostUserID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(mattermostUserID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mattermostUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient provides a mock function with given fields: ctx, token
func (_m *PluginIface) NewClient(ctx context.Context, token *oauth2.Token) plugin.Client {
	ret := _m.Called(ctx, token)

	var r0 plugin.Client
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.Token) plugin.Client); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.Client)
		}
	}

	return r0
}

// NewEncodedAuthToken provides a mock function with given fields: token
func (_m *PluginIface) NewEncodedAuthToken(token *oauth2.Token) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(*oauth2.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*oauth2.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOAuth2Config provides a mock function with given fields:
func (_m *PluginIface) NewOAuth2Config() *oauth2.Config {
	ret := _m.Called()

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// NewStore provides a mock function with given fields: api
func (_m *PluginIface) NewStore(api v5plugin.API) plugin.Store {
	ret := _m.Called(api)

	var r0 plugin.Store
	if rf, ok := ret.Get(0).(func(v5plugin.API) plugin.Store); ok {
		r0 = rf(api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.Store)
		}
	}

	return r0
}

// OnActivate provides a mock function with given fields:
func (_m *PluginIface) OnActivate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnConfigurationChange provides a mock function with given fields:
func (_m *PluginIface) OnConfigurationChange() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseAuthToken provides a mock function with given fields: encoded
func (_m *PluginIface) ParseAuthToken(encoded string) (*oauth2.Token, error) {
	ret := _m.Called(encoded)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(string) *oauth2.Token); ok {
		r0 = rf(encoded)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(encoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServeHTTP provides a mock function with given fields: c, w, r
func (_m *PluginIface) ServeHTTP(c *v5plugin.Context, w http.ResponseWriter, r *http.Request) {
	_m.Called(c, w, r)
}

type mockConstructorTestingTNewPluginIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPluginIface creates a new instance of PluginIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPluginIface(t mockConstructorTestingTNewPluginIface) *PluginIface {
	mock := &PluginIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
